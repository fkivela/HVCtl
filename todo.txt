TODO:

### Now ###
- Document test-interlock

### Soon ###
- Remove the hard-coding of the configuration file
- Improve and document the new command-line arguments
- Improve the graphics of AdvancedTUI; maybe change True/False options to a dot 
  or another visual indicator
- Document command-line arguments

### Before this is ready ###
- Add 'm' as an alias to 'mode' in the UI
- Test the timeout option in the configuration file;
  does specifying a timeout get rid of all blocking commands
- Mke sure the setting in the configuration file are correct
- Run Pylint and Pycodestyle
- Change 'inhibit' to 'inhibition' where needed
- Make sure the examples in usage.rst are correct and up-to-date
- Try to remove the underlines of links in the documentation
- Make sure API.halt() works correctly if HVCtl is stopped while it is 
  connected to the HV
- Test whether opening the interlock in the HV off state causes a fault
  condition

### Maybe later ###
- Test the program. unittest.mock and/or the Hypothesis library should be
  looked into
- Message.from_bytes() could be replaced by overloading Message.__init__ with 
  @singledispatchmethod. However, this would need Python 3.8 so it might not
  be practical even in the future (HVCtl might need to run on machines which
  don't have Python 3.8) 